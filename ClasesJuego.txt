#-------------------------------------------------------------------------------
# Name:        ClasesJuego
# Purpose:     Ninguno, una nota
#
# Author:      Pedro Barr, Felipe, Sebastian Mancera
#
# Created:     19/09/1999
# Copyright:   (c) lenovo 2019
# Licence:     <your licence>
#-------------------------------------------------------------------------------

#Clase padre equipamento (Dispuesta a cambios, y a ser extendible)
class Equipamento():

    '''El atributo efecto podria ser confus
    en la ejecucion, posiblemente lo reemplazemos'''
    _material=None
    _sprites = None
    _efecto = None
    _durabilidad = None

    #getters (obviamente)
    def getMaterial(self):
        return self._material

    def getSprites(self):
        return self._sprites

    def getEfecto(self):
        return self._efecto

    def getDurabilidad(self):
        return self._durabilidad

    #setters (obviamente)
    def setMaterial(self, mat):
        self._material = mat

    def setSprites(self, sprts):
        self._sprites = sprts

    def setEfecto(self, efect):
        self._efecto = efect

    def setDurabilidad(self, dureza):
        self._durabilidad = dureza

#Clase hijo Escudo (Dispuesta a cambios)
class Escudo(Equipamento):

    #constructor con el unico atributo propio
    def __init__(self):
        ''' el radio se supone que se usara en
        la implementacion'''
        self._radio = None

    #getters (obviamente)
    def getRadio(self):
        return self._radio

    #setters (obviamente)
    def setRadio(self, rad):
        self._radio = rad

#Clase hijo Arma (Dispuesta a cambios, y a ser extendible)
class Arma(Equipamento):

    #constructor con el unico atributo propio
    def __init__(self):
        #Atributo propio de la clase hijo
        self._factorAtaque = None

    #getters (obviamente)
    def getFactAtaque(self):
        return self._factorAtaque

    #setters (obviamente)
    def setFactAtaque(self, atk):
        self._factorAtaque = atk

#Clase principal Personaje (Dispuesta a cambios)
class Personaje():

    #constructor con los atributos propios
    def __init__(self):
        '''posible implementacion de _velocidad, _direccion, _objetivo'''
        self._tipo=None
        self._equipamento={}
        self._sprites = None
        self._ruido = None
        self._posicion=None

    #getters (obviamente)
    def getTipo(self):
        return self._tipo

    def getSprites(self):
        return self._sprites

    def getRuidos(self):
        return self._ruido

    def getEquipamento(self):
        return self._equipamento

    def getPosicion(self):
        return self._posicion

    #setters (obviamente)
    def setTipo(self, tip):
        self._tipo = tip

    def setSprites(self, sprts):
        self._sprites = sprts

    def setRuido(self, rudo):
        self._ruido = rudo

    def setEquipamento(self,equipo):
        self._equipamento = equipo

    def setPosicion(self, pos: list):
        self._posicion = pos

    #metodos propios de la clase

    #vacia el inventario de objetos
    def clearEquipamento(self) -> None:
        self.setEquipamento({})

    #A침ade o remplaza un objeto en el inventario
    def addEquipo(self, key, equipo):
        self._equipamento[str(key)] = equipo

    #modifica un objeto en el inventario, llamando al metodo addEquipo
    def modEquipo(self, key, equipo):
        self.addEquipo(key, equipo)

    #elimina un objeto del inventario
    def popEquipo(self, key):
        self._equipamento.pop(str(key))

    #getter de la cantidad de objetos en el inventario (sin manos)
    def getLenEquipamento(self) -> int:
        n=0
        if "RH" in self._equipamento:
            n+=1
        if "LH" in self._equipamento:
            n+=1
        return len(self._equipamento)-n

    #getter para un objeto en el inventario
    def getEquipo(self, key: str) -> Equipamento:
        return self._equipamento[str(key)]

    #getters de la posicion en X y Y
    def getXPos(self) -> int:
        return self._posicion[0]

    def getYPos(self) -> int:
        return self._posicion[1]

    #setters de la posicion X y Y:
    def setXPos(self, x: int):
        self._posicion[0] = x

    def setYPos(self, y: int):
        self._posicion[1] = y

#pruebas del manejo de las clases
def main():
    #blablabla, creamos un personaje vacio de nombre generico
    pers = Personaje()
    pers.setTipo("Link")
    pers.setSprites(["",""])
    pers.setRuido([""])
    pers.setPosicion([0,0])

    '''A침adimos un arma y un escudo generico a su
    mano derecha (RH) y su mano izquierda (LH)'''
    pers.addEquipo("RH", Arma())
    pers.addEquipo("LH", Escudo())

    '''A침adimos un objetos genericos en posiciones
    genericas de su inventario'''
    for i in range(3):
        pers.addEquipo(pers.getLenEquipamento()+1,Equipamento())

    '''Llenamos genericamente los atributos de
    los objetos en su inventario'''
    for keys in pers.getEquipamento():
        pers.getEquipo(keys).setMaterial("Madera")
        pers.getEquipo(keys).setDurabilidad(50)
        if keys=="LH":
            pers.getEquipo(keys).setRadio(1)
        elif keys=="RH":
            pers.getEquipo(keys).setFactAtaque(5)

    '''eliminamos el elemento en posicion 3
    del inventario (para probar el metodo pop)'''
    pers.popEquipo(3)

    '''eliminamos todo en el inventario
    (para probar los metodos get, set y clear )'''
    dicc=pers.getEquipamento()
    pers.clearEquipamento()
    pers.setEquipamento(dicc)

    '''remplazamos el escudo generico por uno m치s
    especifico (para probar el metodo mod)'''
    sqdo=Escudo()
    sqdo.setMaterial("Metal")
    sqdo.setDurabilidad(70)
    sqdo.setEfecto(None)
    sqdo.setRadio(5)
    pers.modEquipo("LH",sqdo)

    '''imprimimos todo para validar que todos
    los cambios han sido correctos (easy peasy)'''
    print(pers.getTipo(),":",pers.getSprites(),",",pers.getRuidos())
    for keys in pers.getEquipamento():
        print(keys,"->",pers.getEquipo(keys).getMaterial(), pers.getEquipo(keys).getDurabilidad(), end=" ")
        if keys=="LH":
            print(pers.getEquipo(keys).getRadio())
        elif keys=="RH":
            print(pers.getEquipo(keys).getFactAtaque())
        else:
            print()
    pass

if __name__ == '__main__':
    main()
